/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.tables.records.ValueDomainPermissibleValueRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValueDomainPermissibleValue extends TableImpl<ValueDomainPermissibleValueRecord> {

    private static final long serialVersionUID = 611408547;

    /**
     * The reference instance of <code>public.value_domain_permissible_value</code>
     */
    public static final ValueDomainPermissibleValue VALUE_DOMAIN_PERMISSIBLE_VALUE = new ValueDomainPermissibleValue();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ValueDomainPermissibleValueRecord> getRecordType() {
        return ValueDomainPermissibleValueRecord.class;
    }

    /**
     * The column <code>public.value_domain_permissible_value.value_domain_scoped_identifier_id</code>.
     */
    public final TableField<ValueDomainPermissibleValueRecord, Integer> VALUE_DOMAIN_SCOPED_IDENTIFIER_ID = createField(DSL.name("value_domain_scoped_identifier_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.value_domain_permissible_value.permissible_value_scoped_identifier_id</code>.
     */
    public final TableField<ValueDomainPermissibleValueRecord, Integer> PERMISSIBLE_VALUE_SCOPED_IDENTIFIER_ID = createField(DSL.name("permissible_value_scoped_identifier_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.value_domain_permissible_value</code> table reference
     */
    public ValueDomainPermissibleValue() {
        this(DSL.name("value_domain_permissible_value"), null);
    }

    /**
     * Create an aliased <code>public.value_domain_permissible_value</code> table reference
     */
    public ValueDomainPermissibleValue(String alias) {
        this(DSL.name(alias), VALUE_DOMAIN_PERMISSIBLE_VALUE);
    }

    /**
     * Create an aliased <code>public.value_domain_permissible_value</code> table reference
     */
    public ValueDomainPermissibleValue(Name alias) {
        this(alias, VALUE_DOMAIN_PERMISSIBLE_VALUE);
    }

    private ValueDomainPermissibleValue(Name alias, Table<ValueDomainPermissibleValueRecord> aliased) {
        this(alias, aliased, null);
    }

    private ValueDomainPermissibleValue(Name alias, Table<ValueDomainPermissibleValueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ValueDomainPermissibleValue(Table<O> child, ForeignKey<O, ValueDomainPermissibleValueRecord> key) {
        super(child, key, VALUE_DOMAIN_PERMISSIBLE_VALUE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ValueDomainPermissibleValueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ValueDomainPermissibleValueRecord, ?>>asList(Keys.VALUE_DOMAIN_PERMISSIBLE_VALUE__VALUE_DOMAIN_PERMISSIBLE_VALU_VALUE_DOMAIN_SCOPED_IDENTIFI_FKEY, Keys.VALUE_DOMAIN_PERMISSIBLE_VALUE__VALUE_DOMAIN_PERMISSIBLE_VALU_PERMISSIBLE_VALUE_SCOPED_IDE_FKEY);
    }

    public ScopedIdentifier valueDomainPermissibleValuValueDomainScopedIdentifiFkey() {
        return new ScopedIdentifier(this, Keys.VALUE_DOMAIN_PERMISSIBLE_VALUE__VALUE_DOMAIN_PERMISSIBLE_VALU_VALUE_DOMAIN_SCOPED_IDENTIFI_FKEY);
    }

    public ScopedIdentifier valueDomainPermissibleValuPermissibleValueScopedIdeFkey() {
        return new ScopedIdentifier(this, Keys.VALUE_DOMAIN_PERMISSIBLE_VALUE__VALUE_DOMAIN_PERMISSIBLE_VALU_PERMISSIBLE_VALUE_SCOPED_IDE_FKEY);
    }

    @Override
    public ValueDomainPermissibleValue as(String alias) {
        return new ValueDomainPermissibleValue(DSL.name(alias), this);
    }

    @Override
    public ValueDomainPermissibleValue as(Name alias) {
        return new ValueDomainPermissibleValue(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ValueDomainPermissibleValue rename(String name) {
        return new ValueDomainPermissibleValue(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ValueDomainPermissibleValue rename(Name name) {
        return new ValueDomainPermissibleValue(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
