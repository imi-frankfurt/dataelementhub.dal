/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables.records;


import de.dataelementhub.dal.jooq.tables.ValueDomainPermissibleValue;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ValueDomainPermissibleValueRecord extends TableRecordImpl<ValueDomainPermissibleValueRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for
     * <code>public.value_domain_permissible_value.value_domain_scoped_identifier_id</code>.
     */
    public void setValueDomainScopedIdentifierId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for
     * <code>public.value_domain_permissible_value.value_domain_scoped_identifier_id</code>.
     */
    public Integer getValueDomainScopedIdentifierId() {
        return (Integer) get(0);
    }

    /**
     * Setter for
     * <code>public.value_domain_permissible_value.permissible_value_scoped_identifier_id</code>.
     */
    public void setPermissibleValueScopedIdentifierId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for
     * <code>public.value_domain_permissible_value.permissible_value_scoped_identifier_id</code>.
     */
    public Integer getPermissibleValueScopedIdentifierId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return ValueDomainPermissibleValue.VALUE_DOMAIN_PERMISSIBLE_VALUE.VALUE_DOMAIN_SCOPED_IDENTIFIER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return ValueDomainPermissibleValue.VALUE_DOMAIN_PERMISSIBLE_VALUE.PERMISSIBLE_VALUE_SCOPED_IDENTIFIER_ID;
    }

    @Override
    public Integer component1() {
        return getValueDomainScopedIdentifierId();
    }

    @Override
    public Integer component2() {
        return getPermissibleValueScopedIdentifierId();
    }

    @Override
    public Integer value1() {
        return getValueDomainScopedIdentifierId();
    }

    @Override
    public Integer value2() {
        return getPermissibleValueScopedIdentifierId();
    }

    @Override
    public ValueDomainPermissibleValueRecord value1(Integer value) {
        setValueDomainScopedIdentifierId(value);
        return this;
    }

    @Override
    public ValueDomainPermissibleValueRecord value2(Integer value) {
        setPermissibleValueScopedIdentifierId(value);
        return this;
    }

    @Override
    public ValueDomainPermissibleValueRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ValueDomainPermissibleValueRecord
     */
    public ValueDomainPermissibleValueRecord() {
        super(ValueDomainPermissibleValue.VALUE_DOMAIN_PERMISSIBLE_VALUE);
    }

    /**
     * Create a detached, initialised ValueDomainPermissibleValueRecord
     */
    public ValueDomainPermissibleValueRecord(Integer valueDomainScopedIdentifierId, Integer permissibleValueScopedIdentifierId) {
        super(ValueDomainPermissibleValue.VALUE_DOMAIN_PERMISSIBLE_VALUE);

        setValueDomainScopedIdentifierId(valueDomainScopedIdentifierId);
        setPermissibleValueScopedIdentifierId(permissibleValueScopedIdentifierId);
    }

    /**
     * Create a detached, initialised ValueDomainPermissibleValueRecord
     */
    public ValueDomainPermissibleValueRecord(de.dataelementhub.dal.jooq.tables.pojos.ValueDomainPermissibleValue value) {
        super(ValueDomainPermissibleValue.VALUE_DOMAIN_PERMISSIBLE_VALUE);

        if (value != null) {
            setValueDomainScopedIdentifierId(value.getValueDomainScopedIdentifierId());
            setPermissibleValueScopedIdentifierId(value.getPermissibleValueScopedIdentifierId());
        }
    }
}
