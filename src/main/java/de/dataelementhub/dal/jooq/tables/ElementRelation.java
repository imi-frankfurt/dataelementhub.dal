/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.RelationType;
import de.dataelementhub.dal.jooq.tables.records.ElementRelationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementRelation extends TableImpl<ElementRelationRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.element_relation</code>
     */
    public static final ElementRelation ELEMENT_RELATION = new ElementRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementRelationRecord> getRecordType() {
        return ElementRelationRecord.class;
    }

    /**
     * The column <code>public.element_relation.left_urn</code>.
     */
    public final TableField<ElementRelationRecord, String> LEFT_URN = createField(DSL.name("left_urn"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.left_source</code>.
     */
    public final TableField<ElementRelationRecord, Integer> LEFT_SOURCE = createField(DSL.name("left_source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.right_urn</code>.
     */
    public final TableField<ElementRelationRecord, String> RIGHT_URN = createField(DSL.name("right_urn"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.right_source</code>.
     */
    public final TableField<ElementRelationRecord, Integer> RIGHT_SOURCE = createField(DSL.name("right_source"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.relation</code>.
     */
    public final TableField<ElementRelationRecord, RelationType> RELATION = createField(DSL.name("relation"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(de.dataelementhub.dal.jooq.enums.RelationType.class), this, "");

    /**
     * The column <code>public.element_relation.created_by</code>.
     */
    public final TableField<ElementRelationRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.created_at</code>.
     */
    public final TableField<ElementRelationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private ElementRelation(Name alias, Table<ElementRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementRelation(Name alias, Table<ElementRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.element_relation</code> table reference
     */
    public ElementRelation(String alias) {
        this(DSL.name(alias), ELEMENT_RELATION);
    }

    /**
     * Create an aliased <code>public.element_relation</code> table reference
     */
    public ElementRelation(Name alias) {
        this(alias, ELEMENT_RELATION);
    }

    /**
     * Create a <code>public.element_relation</code> table reference
     */
    public ElementRelation() {
        this(DSL.name("element_relation"), null);
    }

    public <O extends Record> ElementRelation(Table<O> child, ForeignKey<O, ElementRelationRecord> key) {
        super(child, key, ELEMENT_RELATION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<ElementRelationRecord> getPrimaryKey() {
        return Keys.ELEMENT_RELATION_PKEY;
    }

    @Override
    public List<ForeignKey<ElementRelationRecord, ?>> getReferences() {
        return Arrays.asList(Keys.ELEMENT_RELATION__LEFT_SOURCE_ID_FKEY, Keys.ELEMENT_RELATION__RIGHT_SOURCE_ID_FKEY);
    }

    private transient Source _leftSourceIdFkey;
    private transient Source _rightSourceIdFkey;

    /**
     * Get the implicit join path to the <code>public.source</code> table, via
     * the <code>left_source_id_fkey</code> key.
     */
    public Source leftSourceIdFkey() {
        if (_leftSourceIdFkey == null)
            _leftSourceIdFkey = new Source(this, Keys.ELEMENT_RELATION__LEFT_SOURCE_ID_FKEY);

        return _leftSourceIdFkey;
    }

    /**
     * Get the implicit join path to the <code>public.source</code> table, via
     * the <code>right_source_id_fkey</code> key.
     */
    public Source rightSourceIdFkey() {
        if (_rightSourceIdFkey == null)
            _rightSourceIdFkey = new Source(this, Keys.ELEMENT_RELATION__RIGHT_SOURCE_ID_FKEY);

        return _rightSourceIdFkey;
    }

    @Override
    public ElementRelation as(String alias) {
        return new ElementRelation(DSL.name(alias), this);
    }

    @Override
    public ElementRelation as(Name alias) {
        return new ElementRelation(alias, this);
    }

    @Override
    public ElementRelation as(Table<?> alias) {
        return new ElementRelation(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementRelation rename(String name) {
        return new ElementRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementRelation rename(Name name) {
        return new ElementRelation(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementRelation rename(Table<?> name) {
        return new ElementRelation(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, String, Integer, RelationType, Integer, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super String, ? super Integer, ? super String, ? super Integer, ? super RelationType, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super String, ? super Integer, ? super String, ? super Integer, ? super RelationType, ? super Integer, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
