/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.RelationType;
import de.dataelementhub.dal.jooq.tables.records.ElementRelationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementRelation extends TableImpl<ElementRelationRecord> {

    private static final long serialVersionUID = 615341360;

    /**
     * The reference instance of <code>public.element_relation</code>
     */
    public static final ElementRelation ELEMENT_RELATION = new ElementRelation();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ElementRelationRecord> getRecordType() {
        return ElementRelationRecord.class;
    }

    /**
     * The column <code>public.element_relation.left_urn</code>.
     */
    public final TableField<ElementRelationRecord, String> LEFT_URN = createField(DSL.name("left_urn"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.left_source</code>.
     */
    public final TableField<ElementRelationRecord, Integer> LEFT_SOURCE = createField(DSL.name("left_source"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.right_urn</code>.
     */
    public final TableField<ElementRelationRecord, String> RIGHT_URN = createField(DSL.name("right_urn"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.right_source</code>.
     */
    public final TableField<ElementRelationRecord, Integer> RIGHT_SOURCE = createField(DSL.name("right_source"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.relation</code>.
     */
    public final TableField<ElementRelationRecord, RelationType> RELATION = createField(DSL.name("relation"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(de.dataelementhub.dal.jooq.enums.RelationType.class), this, "");

    /**
     * The column <code>public.element_relation.created_by</code>.
     */
    public final TableField<ElementRelationRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.element_relation.created_at</code>.
     */
    public final TableField<ElementRelationRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.element_relation</code> table reference
     */
    public ElementRelation() {
        this(DSL.name("element_relation"), null);
    }

    /**
     * Create an aliased <code>public.element_relation</code> table reference
     */
    public ElementRelation(String alias) {
        this(DSL.name(alias), ELEMENT_RELATION);
    }

    /**
     * Create an aliased <code>public.element_relation</code> table reference
     */
    public ElementRelation(Name alias) {
        this(alias, ELEMENT_RELATION);
    }

    private ElementRelation(Name alias, Table<ElementRelationRecord> aliased) {
        this(alias, aliased, null);
    }

    private ElementRelation(Name alias, Table<ElementRelationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ElementRelation(Table<O> child, ForeignKey<O, ElementRelationRecord> key) {
        super(child, key, ELEMENT_RELATION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<ElementRelationRecord> getPrimaryKey() {
        return Keys.ELEMENT_RELATION_PKEY;
    }

    @Override
    public List<UniqueKey<ElementRelationRecord>> getKeys() {
        return Arrays.<UniqueKey<ElementRelationRecord>>asList(Keys.ELEMENT_RELATION_PKEY);
    }

    @Override
    public List<ForeignKey<ElementRelationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ElementRelationRecord, ?>>asList(Keys.ELEMENT_RELATION__LEFT_SOURCE_ID_FKEY, Keys.ELEMENT_RELATION__RIGHT_SOURCE_ID_FKEY);
    }

    public Source leftSourceIdFkey() {
        return new Source(this, Keys.ELEMENT_RELATION__LEFT_SOURCE_ID_FKEY);
    }

    public Source rightSourceIdFkey() {
        return new Source(this, Keys.ELEMENT_RELATION__RIGHT_SOURCE_ID_FKEY);
    }

    @Override
    public ElementRelation as(String alias) {
        return new ElementRelation(DSL.name(alias), this);
    }

    @Override
    public ElementRelation as(Name alias) {
        return new ElementRelation(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementRelation rename(String name) {
        return new ElementRelation(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ElementRelation rename(Name name) {
        return new ElementRelation(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, String, Integer, RelationType, Integer, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
