/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.ElementType;
import de.dataelementhub.dal.jooq.tables.records.StagingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Staging extends TableImpl<StagingRecord> {

    private static final long serialVersionUID = 1022323697;

    /**
     * The reference instance of <code>public.staging</code>
     */
    public static final Staging STAGING = new Staging();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StagingRecord> getRecordType() {
        return StagingRecord.class;
    }

    /**
     * The column <code>public.staging.id</code>.
     */
    public final TableField<StagingRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('staging_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.staging.data</code>.
     */
    public final TableField<StagingRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.staging.element_type</code>.
     */
    public final TableField<StagingRecord, ElementType> ELEMENT_TYPE = createField(DSL.name("element_type"), org.jooq.impl.SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ElementType.class), this, "");

    /**
     * The column <code>public.staging.designation</code>.
     */
    public final TableField<StagingRecord, String> DESIGNATION = createField(DSL.name("designation"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.staging.import_id</code>.
     */
    public final TableField<StagingRecord, Integer> IMPORT_ID = createField(DSL.name("import_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.staging.scoped_identifier_id</code>.
     */
    public final TableField<StagingRecord, Integer> SCOPED_IDENTIFIER_ID = createField(DSL.name("scoped_identifier_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.staging.converted_at</code>.
     */
    public final TableField<StagingRecord, LocalDateTime> CONVERTED_AT = createField(DSL.name("converted_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * The column <code>public.staging.converted_by</code>.
     */
    public final TableField<StagingRecord, Integer> CONVERTED_BY = createField(DSL.name("converted_by"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.staging.staged_element_id</code>.
     */
    public final TableField<StagingRecord, String> STAGED_ELEMENT_ID = createField(DSL.name("staged_element_id"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.staging.members</code>.
     */
    public final TableField<StagingRecord, String> MEMBERS = createField(DSL.name("members"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.staging</code> table reference
     */
    public Staging() {
        this(DSL.name("staging"), null);
    }

    /**
     * Create an aliased <code>public.staging</code> table reference
     */
    public Staging(String alias) {
        this(DSL.name(alias), STAGING);
    }

    /**
     * Create an aliased <code>public.staging</code> table reference
     */
    public Staging(Name alias) {
        this(alias, STAGING);
    }

    private Staging(Name alias, Table<StagingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Staging(Name alias, Table<StagingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Staging(Table<O> child, ForeignKey<O, StagingRecord> key) {
        super(child, key, STAGING);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<StagingRecord, Integer> getIdentity() {
        return Keys.IDENTITY_STAGING;
    }

    @Override
    public UniqueKey<StagingRecord> getPrimaryKey() {
        return Keys.STAGING_PKEY;
    }

    @Override
    public List<UniqueKey<StagingRecord>> getKeys() {
        return Arrays.<UniqueKey<StagingRecord>>asList(Keys.STAGING_PKEY);
    }

    @Override
    public List<ForeignKey<StagingRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StagingRecord, ?>>asList(Keys.STAGING__STAGING_IMPORT_FKEY);
    }

    public Import import_() {
        return new Import(this, Keys.STAGING__STAGING_IMPORT_FKEY);
    }

    @Override
    public Staging as(String alias) {
        return new Staging(DSL.name(alias), this);
    }

    @Override
    public Staging as(Name alias) {
        return new Staging(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Staging rename(String name) {
        return new Staging(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Staging rename(Name name) {
        return new Staging(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, String, ElementType, String, Integer, Integer, LocalDateTime, Integer, String, String> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
