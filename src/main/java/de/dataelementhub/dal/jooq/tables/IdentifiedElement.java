/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.ElementType;
import de.dataelementhub.dal.jooq.enums.Status;
import de.dataelementhub.dal.jooq.enums.ValidationType;
import de.dataelementhub.dal.jooq.tables.records.IdentifiedElementRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.JSON;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class IdentifiedElement extends TableImpl<IdentifiedElementRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.identified_element</code>
     */
    public static final IdentifiedElement IDENTIFIED_ELEMENT = new IdentifiedElement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<IdentifiedElementRecord> getRecordType() {
        return IdentifiedElementRecord.class;
    }

    /**
     * The column <code>public.identified_element.si_id</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> SI_ID = createField(DSL.name("si_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.si_identifier</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> SI_IDENTIFIER = createField(DSL.name("si_identifier"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.si_version</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> SI_VERSION = createField(DSL.name("si_version"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.si_status</code>.
     */
    public final TableField<IdentifiedElementRecord, Status> SI_STATUS = createField(DSL.name("si_status"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.Status.class), this, "");

    /**
     * The column <code>public.identified_element.si_namespace_id</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> SI_NAMESPACE_ID = createField(DSL.name("si_namespace_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.id</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.element_type</code>.
     */
    public final TableField<IdentifiedElementRecord, ElementType> ELEMENT_TYPE = createField(DSL.name("element_type"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ElementType.class), this, "");

    /**
     * The column <code>public.identified_element.hidden</code>.
     */
    public final TableField<IdentifiedElementRecord, Boolean> HIDDEN = createField(DSL.name("hidden"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.identified_element.created_by</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.element_id</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.scoped_identifier_id</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> SCOPED_IDENTIFIER_ID = createField(DSL.name("scoped_identifier_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.code</code>.
     */
    public final TableField<IdentifiedElementRecord, String> CODE = createField(DSL.name("code"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.is_valid</code>.
     */
    public final TableField<IdentifiedElementRecord, Boolean> IS_VALID = createField(DSL.name("is_valid"), SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.identified_element.format</code>.
     */
    public final TableField<IdentifiedElementRecord, String> FORMAT = createField(DSL.name("format"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.datatype</code>.
     */
    public final TableField<IdentifiedElementRecord, String> DATATYPE = createField(DSL.name("datatype"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.unit_of_measure</code>.
     */
    public final TableField<IdentifiedElementRecord, String> UNIT_OF_MEASURE = createField(DSL.name("unit_of_measure"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.maximum_characters</code>.
     */
    public final TableField<IdentifiedElementRecord, Integer> MAXIMUM_CHARACTERS = createField(DSL.name("maximum_characters"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.identified_element.description</code>.
     */
    public final TableField<IdentifiedElementRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.validation_type</code>.
     */
    public final TableField<IdentifiedElementRecord, ValidationType> VALIDATION_TYPE = createField(DSL.name("validation_type"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.ValidationType.class), this, "");

    /**
     * The column <code>public.identified_element.validation_data</code>.
     */
    public final TableField<IdentifiedElementRecord, String> VALIDATION_DATA = createField(DSL.name("validation_data"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.permitted_value</code>.
     */
    public final TableField<IdentifiedElementRecord, String> PERMITTED_VALUE = createField(DSL.name("permitted_value"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.identified_element.data</code>.
     */
    public final TableField<IdentifiedElementRecord, JSON> DATA = createField(DSL.name("data"), SQLDataType.JSON, this, "");

    /**
     * The column <code>public.identified_element.uuid</code>.
     */
    public final TableField<IdentifiedElementRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.identified_element.external_id</code>.
     */
    public final TableField<IdentifiedElementRecord, String> EXTERNAL_ID = createField(DSL.name("external_id"), SQLDataType.CLOB, this, "");

    private IdentifiedElement(Name alias, Table<IdentifiedElementRecord> aliased) {
        this(alias, aliased, null);
    }

    private IdentifiedElement(Name alias, Table<IdentifiedElementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "identified_element" as  SELECT si.id AS si_id,
         si.identifier AS si_identifier,
         si.version AS si_version,
         si.status AS si_status,
         si.namespace_id AS si_namespace_id,
         e.id,
         e.element_type,
         e.hidden,
         e.created_by,
         e.element_id,
         e.scoped_identifier_id,
         e.code,
         e.is_valid,
         e.format,
         e.datatype,
         e.unit_of_measure,
         e.maximum_characters,
         e.description,
         e.validation_type,
         e.validation_data,
         e.permitted_value,
         e.data,
         e.uuid,
         e.external_id
        FROM ((scoped_identifier si
          LEFT JOIN element ns ON ((si.namespace_id = ns.id)))
          LEFT JOIN element e ON ((e.id = si.element_id)));
        """));
    }

    /**
     * Create an aliased <code>public.identified_element</code> table reference
     */
    public IdentifiedElement(String alias) {
        this(DSL.name(alias), IDENTIFIED_ELEMENT);
    }

    /**
     * Create an aliased <code>public.identified_element</code> table reference
     */
    public IdentifiedElement(Name alias) {
        this(alias, IDENTIFIED_ELEMENT);
    }

    /**
     * Create a <code>public.identified_element</code> table reference
     */
    public IdentifiedElement() {
        this(DSL.name("identified_element"), null);
    }

    public <O extends Record> IdentifiedElement(Table<O> child, ForeignKey<O, IdentifiedElementRecord> key) {
        super(child, key, IDENTIFIED_ELEMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public IdentifiedElement as(String alias) {
        return new IdentifiedElement(DSL.name(alias), this);
    }

    @Override
    public IdentifiedElement as(Name alias) {
        return new IdentifiedElement(alias, this);
    }

    @Override
    public IdentifiedElement as(Table<?> alias) {
        return new IdentifiedElement(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentifiedElement rename(String name) {
        return new IdentifiedElement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentifiedElement rename(Name name) {
        return new IdentifiedElement(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public IdentifiedElement rename(Table<?> name) {
        return new IdentifiedElement(name.getQualifiedName(), null);
    }
}
