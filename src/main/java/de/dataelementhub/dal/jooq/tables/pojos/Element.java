/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables.pojos;


import de.dataelementhub.dal.jooq.enums.ElementType;
import de.dataelementhub.dal.jooq.enums.ValidationType;

import java.io.Serializable;
import java.util.UUID;

import org.jooq.JSON;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Element implements Serializable {

    private static final long serialVersionUID = 1L;

    private Integer id;
    private ElementType elementType;
    private Boolean hidden;
    private Integer createdBy;
    private Integer elementId;
    private Integer scopedIdentifierId;
    private String code;
    private Boolean isValid;
    private String format;
    private String datatype;
    private String unitOfMeasure;
    private Integer maximumCharacters;
    private String description;
    private ValidationType validationType;
    private String validationData;
    private String permittedValue;
    private JSON data;
    private UUID uuid;
    private String externalId;

    public Element() {}

    public Element(Element value) {
        this.id = value.id;
        this.elementType = value.elementType;
        this.hidden = value.hidden;
        this.createdBy = value.createdBy;
        this.elementId = value.elementId;
        this.scopedIdentifierId = value.scopedIdentifierId;
        this.code = value.code;
        this.isValid = value.isValid;
        this.format = value.format;
        this.datatype = value.datatype;
        this.unitOfMeasure = value.unitOfMeasure;
        this.maximumCharacters = value.maximumCharacters;
        this.description = value.description;
        this.validationType = value.validationType;
        this.validationData = value.validationData;
        this.permittedValue = value.permittedValue;
        this.data = value.data;
        this.uuid = value.uuid;
        this.externalId = value.externalId;
    }

    public Element(
        Integer id,
        ElementType elementType,
        Boolean hidden,
        Integer createdBy,
        Integer elementId,
        Integer scopedIdentifierId,
        String code,
        Boolean isValid,
        String format,
        String datatype,
        String unitOfMeasure,
        Integer maximumCharacters,
        String description,
        ValidationType validationType,
        String validationData,
        String permittedValue,
        JSON data,
        UUID uuid,
        String externalId
    ) {
        this.id = id;
        this.elementType = elementType;
        this.hidden = hidden;
        this.createdBy = createdBy;
        this.elementId = elementId;
        this.scopedIdentifierId = scopedIdentifierId;
        this.code = code;
        this.isValid = isValid;
        this.format = format;
        this.datatype = datatype;
        this.unitOfMeasure = unitOfMeasure;
        this.maximumCharacters = maximumCharacters;
        this.description = description;
        this.validationType = validationType;
        this.validationData = validationData;
        this.permittedValue = permittedValue;
        this.data = data;
        this.uuid = uuid;
        this.externalId = externalId;
    }

    /**
     * Getter for <code>public.element.id</code>.
     */
    public Integer getId() {
        return this.id;
    }

    /**
     * Setter for <code>public.element.id</code>.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Getter for <code>public.element.element_type</code>.
     */
    public ElementType getElementType() {
        return this.elementType;
    }

    /**
     * Setter for <code>public.element.element_type</code>.
     */
    public void setElementType(ElementType elementType) {
        this.elementType = elementType;
    }

    /**
     * Getter for <code>public.element.hidden</code>.
     */
    public Boolean getHidden() {
        return this.hidden;
    }

    /**
     * Setter for <code>public.element.hidden</code>.
     */
    public void setHidden(Boolean hidden) {
        this.hidden = hidden;
    }

    /**
     * Getter for <code>public.element.created_by</code>.
     */
    public Integer getCreatedBy() {
        return this.createdBy;
    }

    /**
     * Setter for <code>public.element.created_by</code>.
     */
    public void setCreatedBy(Integer createdBy) {
        this.createdBy = createdBy;
    }

    /**
     * Getter for <code>public.element.element_id</code>.
     */
    public Integer getElementId() {
        return this.elementId;
    }

    /**
     * Setter for <code>public.element.element_id</code>.
     */
    public void setElementId(Integer elementId) {
        this.elementId = elementId;
    }

    /**
     * Getter for <code>public.element.scoped_identifier_id</code>.
     */
    public Integer getScopedIdentifierId() {
        return this.scopedIdentifierId;
    }

    /**
     * Setter for <code>public.element.scoped_identifier_id</code>.
     */
    public void setScopedIdentifierId(Integer scopedIdentifierId) {
        this.scopedIdentifierId = scopedIdentifierId;
    }

    /**
     * Getter for <code>public.element.code</code>.
     */
    public String getCode() {
        return this.code;
    }

    /**
     * Setter for <code>public.element.code</code>.
     */
    public void setCode(String code) {
        this.code = code;
    }

    /**
     * Getter for <code>public.element.is_valid</code>.
     */
    public Boolean getIsValid() {
        return this.isValid;
    }

    /**
     * Setter for <code>public.element.is_valid</code>.
     */
    public void setIsValid(Boolean isValid) {
        this.isValid = isValid;
    }

    /**
     * Getter for <code>public.element.format</code>.
     */
    public String getFormat() {
        return this.format;
    }

    /**
     * Setter for <code>public.element.format</code>.
     */
    public void setFormat(String format) {
        this.format = format;
    }

    /**
     * Getter for <code>public.element.datatype</code>.
     */
    public String getDatatype() {
        return this.datatype;
    }

    /**
     * Setter for <code>public.element.datatype</code>.
     */
    public void setDatatype(String datatype) {
        this.datatype = datatype;
    }

    /**
     * Getter for <code>public.element.unit_of_measure</code>.
     */
    public String getUnitOfMeasure() {
        return this.unitOfMeasure;
    }

    /**
     * Setter for <code>public.element.unit_of_measure</code>.
     */
    public void setUnitOfMeasure(String unitOfMeasure) {
        this.unitOfMeasure = unitOfMeasure;
    }

    /**
     * Getter for <code>public.element.maximum_characters</code>.
     */
    public Integer getMaximumCharacters() {
        return this.maximumCharacters;
    }

    /**
     * Setter for <code>public.element.maximum_characters</code>.
     */
    public void setMaximumCharacters(Integer maximumCharacters) {
        this.maximumCharacters = maximumCharacters;
    }

    /**
     * Getter for <code>public.element.description</code>.
     */
    public String getDescription() {
        return this.description;
    }

    /**
     * Setter for <code>public.element.description</code>.
     */
    public void setDescription(String description) {
        this.description = description;
    }

    /**
     * Getter for <code>public.element.validation_type</code>.
     */
    public ValidationType getValidationType() {
        return this.validationType;
    }

    /**
     * Setter for <code>public.element.validation_type</code>.
     */
    public void setValidationType(ValidationType validationType) {
        this.validationType = validationType;
    }

    /**
     * Getter for <code>public.element.validation_data</code>.
     */
    public String getValidationData() {
        return this.validationData;
    }

    /**
     * Setter for <code>public.element.validation_data</code>.
     */
    public void setValidationData(String validationData) {
        this.validationData = validationData;
    }

    /**
     * Getter for <code>public.element.permitted_value</code>.
     */
    public String getPermittedValue() {
        return this.permittedValue;
    }

    /**
     * Setter for <code>public.element.permitted_value</code>.
     */
    public void setPermittedValue(String permittedValue) {
        this.permittedValue = permittedValue;
    }

    /**
     * Getter for <code>public.element.data</code>.
     */
    public JSON getData() {
        return this.data;
    }

    /**
     * Setter for <code>public.element.data</code>.
     */
    public void setData(JSON data) {
        this.data = data;
    }

    /**
     * Getter for <code>public.element.uuid</code>.
     */
    public UUID getUuid() {
        return this.uuid;
    }

    /**
     * Setter for <code>public.element.uuid</code>.
     */
    public void setUuid(UUID uuid) {
        this.uuid = uuid;
    }

    /**
     * Getter for <code>public.element.external_id</code>.
     */
    public String getExternalId() {
        return this.externalId;
    }

    /**
     * Setter for <code>public.element.external_id</code>.
     */
    public void setExternalId(String externalId) {
        this.externalId = externalId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Element other = (Element) obj;
        if (this.id == null) {
            if (other.id != null)
                return false;
        }
        else if (!this.id.equals(other.id))
            return false;
        if (this.elementType == null) {
            if (other.elementType != null)
                return false;
        }
        else if (!this.elementType.equals(other.elementType))
            return false;
        if (this.hidden == null) {
            if (other.hidden != null)
                return false;
        }
        else if (!this.hidden.equals(other.hidden))
            return false;
        if (this.createdBy == null) {
            if (other.createdBy != null)
                return false;
        }
        else if (!this.createdBy.equals(other.createdBy))
            return false;
        if (this.elementId == null) {
            if (other.elementId != null)
                return false;
        }
        else if (!this.elementId.equals(other.elementId))
            return false;
        if (this.scopedIdentifierId == null) {
            if (other.scopedIdentifierId != null)
                return false;
        }
        else if (!this.scopedIdentifierId.equals(other.scopedIdentifierId))
            return false;
        if (this.code == null) {
            if (other.code != null)
                return false;
        }
        else if (!this.code.equals(other.code))
            return false;
        if (this.isValid == null) {
            if (other.isValid != null)
                return false;
        }
        else if (!this.isValid.equals(other.isValid))
            return false;
        if (this.format == null) {
            if (other.format != null)
                return false;
        }
        else if (!this.format.equals(other.format))
            return false;
        if (this.datatype == null) {
            if (other.datatype != null)
                return false;
        }
        else if (!this.datatype.equals(other.datatype))
            return false;
        if (this.unitOfMeasure == null) {
            if (other.unitOfMeasure != null)
                return false;
        }
        else if (!this.unitOfMeasure.equals(other.unitOfMeasure))
            return false;
        if (this.maximumCharacters == null) {
            if (other.maximumCharacters != null)
                return false;
        }
        else if (!this.maximumCharacters.equals(other.maximumCharacters))
            return false;
        if (this.description == null) {
            if (other.description != null)
                return false;
        }
        else if (!this.description.equals(other.description))
            return false;
        if (this.validationType == null) {
            if (other.validationType != null)
                return false;
        }
        else if (!this.validationType.equals(other.validationType))
            return false;
        if (this.validationData == null) {
            if (other.validationData != null)
                return false;
        }
        else if (!this.validationData.equals(other.validationData))
            return false;
        if (this.permittedValue == null) {
            if (other.permittedValue != null)
                return false;
        }
        else if (!this.permittedValue.equals(other.permittedValue))
            return false;
        if (this.data == null) {
            if (other.data != null)
                return false;
        }
        else if (!this.data.equals(other.data))
            return false;
        if (this.uuid == null) {
            if (other.uuid != null)
                return false;
        }
        else if (!this.uuid.equals(other.uuid))
            return false;
        if (this.externalId == null) {
            if (other.externalId != null)
                return false;
        }
        else if (!this.externalId.equals(other.externalId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.id == null) ? 0 : this.id.hashCode());
        result = prime * result + ((this.elementType == null) ? 0 : this.elementType.hashCode());
        result = prime * result + ((this.hidden == null) ? 0 : this.hidden.hashCode());
        result = prime * result + ((this.createdBy == null) ? 0 : this.createdBy.hashCode());
        result = prime * result + ((this.elementId == null) ? 0 : this.elementId.hashCode());
        result = prime * result + ((this.scopedIdentifierId == null) ? 0 : this.scopedIdentifierId.hashCode());
        result = prime * result + ((this.code == null) ? 0 : this.code.hashCode());
        result = prime * result + ((this.isValid == null) ? 0 : this.isValid.hashCode());
        result = prime * result + ((this.format == null) ? 0 : this.format.hashCode());
        result = prime * result + ((this.datatype == null) ? 0 : this.datatype.hashCode());
        result = prime * result + ((this.unitOfMeasure == null) ? 0 : this.unitOfMeasure.hashCode());
        result = prime * result + ((this.maximumCharacters == null) ? 0 : this.maximumCharacters.hashCode());
        result = prime * result + ((this.description == null) ? 0 : this.description.hashCode());
        result = prime * result + ((this.validationType == null) ? 0 : this.validationType.hashCode());
        result = prime * result + ((this.validationData == null) ? 0 : this.validationData.hashCode());
        result = prime * result + ((this.permittedValue == null) ? 0 : this.permittedValue.hashCode());
        result = prime * result + ((this.data == null) ? 0 : this.data.hashCode());
        result = prime * result + ((this.uuid == null) ? 0 : this.uuid.hashCode());
        result = prime * result + ((this.externalId == null) ? 0 : this.externalId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Element (");

        sb.append(id);
        sb.append(", ").append(elementType);
        sb.append(", ").append(hidden);
        sb.append(", ").append(createdBy);
        sb.append(", ").append(elementId);
        sb.append(", ").append(scopedIdentifierId);
        sb.append(", ").append(code);
        sb.append(", ").append(isValid);
        sb.append(", ").append(format);
        sb.append(", ").append(datatype);
        sb.append(", ").append(unitOfMeasure);
        sb.append(", ").append(maximumCharacters);
        sb.append(", ").append(description);
        sb.append(", ").append(validationType);
        sb.append(", ").append(validationData);
        sb.append(", ").append(permittedValue);
        sb.append(", ").append(data);
        sb.append(", ").append(uuid);
        sb.append(", ").append(externalId);

        sb.append(")");
        return sb.toString();
    }
}
