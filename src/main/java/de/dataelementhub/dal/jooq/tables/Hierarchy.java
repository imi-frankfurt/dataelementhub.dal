/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Indexes;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.tables.records.HierarchyRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Hierarchy extends TableImpl<HierarchyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.hierarchy</code>
     */
    public static final Hierarchy HIERARCHY = new Hierarchy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HierarchyRecord> getRecordType() {
        return HierarchyRecord.class;
    }

    /**
     * The column <code>public.hierarchy.root</code>.
     */
    public final TableField<HierarchyRecord, Integer> ROOT = createField(DSL.name("root"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.hierarchy.super</code>.
     */
    public final TableField<HierarchyRecord, Integer> SUPER = createField(DSL.name("super"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.hierarchy.sub</code>.
     */
    public final TableField<HierarchyRecord, Integer> SUB = createField(DSL.name("sub"), SQLDataType.INTEGER, this, "");

    private Hierarchy(Name alias, Table<HierarchyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Hierarchy(Name alias, Table<HierarchyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.materializedView());
    }

    /**
     * Create an aliased <code>public.hierarchy</code> table reference
     */
    public Hierarchy(String alias) {
        this(DSL.name(alias), HIERARCHY);
    }

    /**
     * Create an aliased <code>public.hierarchy</code> table reference
     */
    public Hierarchy(Name alias) {
        this(alias, HIERARCHY);
    }

    /**
     * Create a <code>public.hierarchy</code> table reference
     */
    public Hierarchy() {
        this(DSL.name("hierarchy"), null);
    }

    public <O extends Record> Hierarchy(Table<O> child, ForeignKey<O, HierarchyRecord> key) {
        super(child, key, HIERARCHY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.HIERARCHY_ROOT_IDX, Indexes.HIERARCHY_SUB_IDX, Indexes.HIERARCHY_SUPER_IDX, Indexes.HIERARCHY_SUPER_SUB_IDX);
    }

    @Override
    public Hierarchy as(String alias) {
        return new Hierarchy(DSL.name(alias), this);
    }

    @Override
    public Hierarchy as(Name alias) {
        return new Hierarchy(alias, this);
    }

    @Override
    public Hierarchy as(Table<?> alias) {
        return new Hierarchy(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Hierarchy rename(String name) {
        return new Hierarchy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hierarchy rename(Name name) {
        return new Hierarchy(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Hierarchy rename(Table<?> name) {
        return new Hierarchy(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link #convertFrom(Class, Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
