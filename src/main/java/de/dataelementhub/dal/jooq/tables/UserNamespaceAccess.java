/*
 * This file is generated by jOOQ.
 */
package de.dataelementhub.dal.jooq.tables;


import de.dataelementhub.dal.jooq.Indexes;
import de.dataelementhub.dal.jooq.Keys;
import de.dataelementhub.dal.jooq.Public;
import de.dataelementhub.dal.jooq.enums.AccessLevelType;
import de.dataelementhub.dal.jooq.tables.records.UserNamespaceAccessRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserNamespaceAccess extends TableImpl<UserNamespaceAccessRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_namespace_access</code>
     */
    public static final UserNamespaceAccess USER_NAMESPACE_ACCESS = new UserNamespaceAccess();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserNamespaceAccessRecord> getRecordType() {
        return UserNamespaceAccessRecord.class;
    }

    /**
     * The column <code>public.user_namespace_access.user_id</code>.
     */
    public final TableField<UserNamespaceAccessRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_namespace_access.namespace_id</code>.
     */
    public final TableField<UserNamespaceAccessRecord, Integer> NAMESPACE_ID = createField(DSL.name("namespace_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_namespace_access.access_level</code>.
     */
    public final TableField<UserNamespaceAccessRecord, AccessLevelType> ACCESS_LEVEL = createField(DSL.name("access_level"), SQLDataType.VARCHAR.asEnumDataType(de.dataelementhub.dal.jooq.enums.AccessLevelType.class), this, "");

    private UserNamespaceAccess(Name alias, Table<UserNamespaceAccessRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserNamespaceAccess(Name alias, Table<UserNamespaceAccessRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_namespace_access</code> table
     * reference
     */
    public UserNamespaceAccess(String alias) {
        this(DSL.name(alias), USER_NAMESPACE_ACCESS);
    }

    /**
     * Create an aliased <code>public.user_namespace_access</code> table
     * reference
     */
    public UserNamespaceAccess(Name alias) {
        this(alias, USER_NAMESPACE_ACCESS);
    }

    /**
     * Create a <code>public.user_namespace_access</code> table reference
     */
    public UserNamespaceAccess() {
        this(DSL.name("user_namespace_access"), null);
    }

    public <O extends Record> UserNamespaceAccess(Table<O> child, ForeignKey<O, UserNamespaceAccessRecord> key) {
        super(child, key, USER_NAMESPACE_ACCESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.USER_NAMESPACE_ACCESS_NAMESPACE_ID_IDX, Indexes.USER_NAMESPACE_ACCESS_USER_ID_IDX);
    }

    @Override
    public List<UniqueKey<UserNamespaceAccessRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.USER_NAMESPACE_ACCESS_UNIQUE);
    }

    @Override
    public List<ForeignKey<UserNamespaceAccessRecord, ?>> getReferences() {
        return Arrays.asList(Keys.USER_NAMESPACE_ACCESS__USER_NAMESPACE_ACCESS_USER_FKEY, Keys.USER_NAMESPACE_ACCESS__USER_NAMESPACE_ACCESS_NAMESPACE_FKEY);
    }

    private transient DehubUser _dehubUser;
    private transient Element _element;

    /**
     * Get the implicit join path to the <code>public.dehub_user</code> table.
     */
    public DehubUser dehubUser() {
        if (_dehubUser == null)
            _dehubUser = new DehubUser(this, Keys.USER_NAMESPACE_ACCESS__USER_NAMESPACE_ACCESS_USER_FKEY);

        return _dehubUser;
    }

    /**
     * Get the implicit join path to the <code>public.element</code> table.
     */
    public Element element() {
        if (_element == null)
            _element = new Element(this, Keys.USER_NAMESPACE_ACCESS__USER_NAMESPACE_ACCESS_NAMESPACE_FKEY);

        return _element;
    }

    @Override
    public UserNamespaceAccess as(String alias) {
        return new UserNamespaceAccess(DSL.name(alias), this);
    }

    @Override
    public UserNamespaceAccess as(Name alias) {
        return new UserNamespaceAccess(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNamespaceAccess rename(String name) {
        return new UserNamespaceAccess(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserNamespaceAccess rename(Name name) {
        return new UserNamespaceAccess(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, AccessLevelType> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
